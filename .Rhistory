submit()
submit()
source('~/.active-rstudio-document')
cr <- corr("specdata", 150)
debugSource('~/Documents/datasciencecoursera/corr.r')
cr <- corr("specdata", 150)
cr <- corr("specdata", 150)
debugSource('~/Documents/datasciencecoursera/corr.r')
cr <- corr("specdata", 150)
fileNames[i]
source('~/.active-rstudio-document')
cr <- corr("specdata", 150)
?paste
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
cr <- corr("specdata", 150)
summary(cr)
head(cr)
source('~/Documents/datasciencecoursera/corr.r')
set.seed(1)
rposi(5, 2)
rpois(5, 2)
?qpois
et.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
y
?rbinorm
?rbinom
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
x <- rbinom(10, 10, 0.5)
x
?rpois
x <- seq)1,100
x <- seq(1,100)
x
dpois(x,10)
ppois(x,10)
plot(ppois(x,10))
dpois(x,10)
plot(dpois(x,10))
plot(qpois(x,10))
x <- seq(seq(.1,10))
x
x <- seq(seq(0.1,10))
?seq
x <- seq(seq(from=0.1,to=1, by=.1))
x
x <- seq(from=0.1,to=1, by=.1)
x
plot(qpois(x,10))
?cat
mystats <- function(x, parametric=TRUE, print=FALSE) {    if (parametric) {        center <- mean(x); spread <- sd(x)    } else {        center <- median(x); spread <- mad(x)    }    if (print & parametric) {        cat("Mean=", center, "\n", "SD=", spread, "\n")    } else if (print & !parametric) {        cat("Median=", center, "\n", "MAD=", spread, "\n")    }    result <- list(center=center, spread=spread)    return(result)}
mystats <- function(x, parametric=TRUE, print=FALSE) {    if (parametric) {        center <- mean(x); spread <- sd(x)    } else {        center <- median(x); spread <- mad(x)    }    if (print & parametric) {        cat("Mean=", center, "\n", "SD=", spread, "\n")    } else if (print & !parametric) {        cat("Median=", center, "\n", "MAD=", spread, "\n")    }    result <- list(center=center, spread=spread)    return(result)}
mystats <- function(x, parametric=TRUE, print=FALSE) {    if (parametric) {        center <- mean(x); spread <- sd(x)    } else {        center <- median(x); spread <- mad(x)    }    if (print & parametric) {        cat("Mean=", center, "\n", "SD=", spread, "\n")    } else if (print & !parametric) {        cat("Median=", center, "\n", "MAD=", spread, "\n")    }    result <- list(center=center, spread=spread)    return(result)}
mystats <- function(x, parametric=TRUE, print=FALSE) {    if (parametric) {        center <- mean(x); spread <- sd(x)    } else {        center <- median(x); spread <- mad(x)    }    if (print & parametric) {        cat("Mean=", center, "\n", "SD=", spread, "\n")    } else if (print & !parametric) {        cat("Median=", center, "\n", "MAD=", spread, "\n")    }    result <- list(center=center, spread=spread)    return(result)}
if (parametric) {
center <- mean(x); spread <- sd(x)
} else {
center <- median(x); spread <- mad(x)
}
if (print & parametric) {
cat("Mean=", center, "\n", "SD=", spread, "\n")
} else if (print & !parametric) {
cat("Median=", center, "\n", "MAD=", spread, "\n")
}
result <- list(center=center, spread=spread)
return(result)
}
if (parametric) {
center <- mean(x); spread <- sd(x)
} else {
center <- median(x); spread <- mad(x)
}
if (print & parametric) {
cat("Mean=", center, "\n", "SD=", spread, "\n")
} else if (print & !parametric) {
cat("Median=", center, "\n", "MAD=", spread, "\n")
}
result <- list(center=center, spread=spread)
return(result)
}
mystats <- function(x, parametric=TRUE, print=FALSE) {    if (parametric) {        center <- mean(x); spread <- sd(x)    } else {        center <- median(x); spread <- mad(x)    }    if (print & parametric) {        cat("Mean=", center, "\n", "SD=", spread, "\n")    } else if (print & !parametric) {        cat("Median=", center, "\n", "MAD=", spread, "\n")    }    result <- list(center=center, spread=spread)    return(result)}
mystats <- function(x, parametric=TRUE, print=FALSE) {  if (parametric) {    center <- mean(x); spread <- sd(x)  } else {    center <- median(x); spread <- mad(x)  }  if (print & parametric) {    cat("Mean=", center, "\n", "SD=", spread, "\n")  } else if (print & !parametric) {    cat("Median=", center, "\n", "MAD=", spread, "\n")  }  result <- list(center=center, spread=spread)  return(result)}
mystats <- function(x, parametric=TRUE, prnt=FALSE) {  if (parametric) {    center <- mean(x); spread <- sd(x)  } else {    center <- median(x); spread <- mad(x)  }  if (prnt & parametric) {    cat("Mean=", center, "\n", "SD=", spread, "\n")  } else if (print & !parametric) {    cat("Median=", center, "\n", "MAD=", spread, "\n")  }  result <- list(center=center, spread=spread)  return(result)}
mystats <- function(x, parametric=TRUE, prnt=FALSE) {  if (parametric) {    center <- mean(x); spread <- sd(x)  } else {    center <- median(x); spread <- mad(x)  }  if (prnt & parametric) {    cat("Mean=", center, "\n", "SD=", spread, "\n")  } else if (print & !parametric) {    cat("Median=", center, "\n", "MAD=", spread, "\n")  }  result <- list(center=center, spread=spread)  return(result)}
mystats <- function(x, parametric=TRUE, print=FALSE) {  if (parametric) {    center <- mean(x); spread <- sd(x)  } else {    center <- median(x); spread <- mad(x)  }  result <- list(center=center, spread=spread)  return(result)}
mystats <- function(x, parametric=TRUE, print=FALSE) {
if (parametric) {
center <- mean(x); spread <- sd(x)
} else {
center <- median(x); spread <- mad(x)
}
if (print & parametric) {
cat("Mean=", center, "\n", "SD=", spread, "\n")
} else if (print & !parametric) {
cat("Median=", center, "\n", "MAD=", spread, "\n")
}
result <- list(center=center, spread=spread)
return(result)
}
mystats <- function(x, parametric=TRUE, print=FALSE) {
if (parametric) {
center <- mean(x); spread <- sd(x)
} else {
center <- median(x); spread <- mad(x)
}
if (print & parametric) {
cat("Mean=", center, "\n", "SD=", spread, "\n")
} else if (print & !parametric) {
cat("Median=", center, "\n", "MAD=", spread, "\n")
}
result <- list(center=center, spread=spread)
return(result)
}
set.seed(1234)
x <- rnorm(500)
y <- mystats(x)
y$center
y$spread
Sys.time()
?]
?[]
?[
?]
?strsplit
x <- c(as = "asfef", qu = "qwerty", "yuiop[", "b", "stuff.blah.yech")
# split x on the letter e
strsplit(x, "e")
load (mtcars)
load ("mtcars")
data(mtcars)
library(mtcars)
library("mtcars"")
0
""
library("mtcars")
data(mtcars)
data(mtcars)
names(mtcars)
cars <- mtcars(1:5, 1:4)
mtcars
cars <- mtcars[1:5, 1:4]
cars
t(cars)
install.packages("RMySQL")
load(RMySQL)
load("RMySQL")
library("RMySQL", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
ucscDb <- dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
resul <- dbGetQuery(ucsdDb, "show databases"); dbDisconnect(ucscDb)
resul <- dbGetQuery(ucsdDb, "show databases"); dbDisconnect(ucscDb);
result <- dbGetQuery(ucscDb, "show databases"); dbDisconnect(ucscDb)
result
hg19 <- dbConnect(MySQL(), user="genome", db="hg19", host="genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
length(allTables)
allTables[1:5]
dbListFields(hg19, "affyU133Plus2")
dbGetQuery(hg19, "select count(*) from affyU133Plus2")
affyData <- dbReadTable(hg19, "affyU133Plus2")
head(affyU133Plus2)
head(affyData)
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 and 3")
affyMis <- fetch(query); quantile(affyMis$mis$Matches)
affyMis <- fetch(query)
quantile(affyMis$misMatches)
affyMisSmall <- fetch(query, n=10); dbClearResult(query)
dim(affyMisSmall)
dbDisconnect(hg19)
detach("package:RMySQL", unload=TRUE)
con <- url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
htmlCode <- readLines(con)
htmlCode
close(con)
library(XML)
url <- ("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
html <- htmlTreeParse(url, useInternalNodes=T)
htm,l
html
xpathSApply(html, "//title", xmlValue)
xpathSApply(htnl, "//td[@id='col-citeby']", xmlValue)
xpathSApply(html, "//td[@id='col-citeby']", xmlValue)
xpathSApply(html, "//td[@id='col-citedby']", xmlValue)
library(httr)
html2 <- GET(url)
html2
content2 <- content(html2, as <- "text")
parsedHtml <- htmlParse(content2, asText=T)
xpathSApply(parsedHtml, "//title", xmlValue)
pg1 <- GET("http://httpbin.org/basic-auth/user/passwd")
pg1
pg2 <- GET("http://httpbin.org/basic-auth/user/passwd", authenticate("user", "passwd"))
pg2
names(pg2)
google <- handle("http://google.com")
handle
google
pg1 <- GET(handle=google, path="/")
pg2 <- GET(handle=google, path="search")
pg1
pg2
?connections
?jpeg
detach("package:RMySQL", unload=TRUE)
set.seed(13435)
x <- data.frane("var1"=sample(1:5), "var2"=sample(6:10), "var3"=sample(11:15))
x <- data.frame("var1"=sample(1:5), "var2"=sample(6:10), "var3"=sample(11:15))
x
x <- x[sample(1:5),]; x$var2[c(1,3)]=NA
x
x[1,]
x[,1]
x[1:2,]
x[1:2,"var2"]
x
x[x$var1<=3 & x$var3>11,]
?which
library(reshape)
data (mtcars)
heat(mtcars)
head(mtcars)
mtcars$carname <- rownames(mtcars)
head(mtcars)
carmelt <- melt(mtcars, id=c("carname", "gear", "ctl"), measure.vars=c("mpg", "hp"))
carmelt <- melt(mtcars, id=c("carname", "gear", "cyl"), measure.vars=c("mpg", "hp"))
carmelt
?melt
?cast
?dcast
cylData <- cast(carmelt, cyl ~ variable)
cylData
cylData <- cast(carmelt, cyl ~ variable, mean)
cylData
names(mtcars)
mtcars$eff <- mtcars$hp/mtcars$disp
head(mtcars)
effmelt <- melt(mtcars, id=c("carname", "eff", "cyl"), measure.vars="eff"
)
head(effmelt)
effmelt
effmelt <- melt(mtcars, id=c("carname", "eff", "cyl"), measure.vars=c("cyl, "eff"))
effmelt <- melt(mtcars, id=c("carname", "eff", "cyl"), measure.vars=c("cyl", "eff"))
effmelt
effData <- cast(carmelt, eff ~ variable, mean)
effData <- cast(carmelt, cyl ~ variable, mean)
effData
effData <- cast(effmelt, cyl ~ variable, mean)
effData
pop <- read.csv('http://2010.census.gov/2010census/data/pop_density.csv', skip=3)
pop <- read.csv('http://2010.census.gov/2010census/data/pop_density.csv', skip=3, method="curl")
install.packages("knitr")
?devices
?Devices
library(datasets)
with(faithful, plot(eruptions, waiting))
?with
dev.cur()
?png
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?splom
?trellis.par.set
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) * geom(smooth())
qplot(votes, rating, data = movies) * geom_smooth()
qplot(votes, rating, data = movies) + geom_smooth()
library(datasets)
qplot(Wind, Ozone, data = airquality, facets = .~factor(Month))
str(airquality)
airquality=transform(airquality, Month=factor(Month))
str(airquality)
qplot(Wind, Ozone, data = airquality, facets = .~Month)
?lines()
?llines()
?points()
llines
library lattice
library (lattice)
llines
?lpoints
lpoints
install.packages("gcookbook")
install.packages("devtools")
library(dectools)
library(devtools)
install_github("learnings", "richierocks")
install_github("learningr", "richierocks")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
demo()
browseVignettes()
vignette("Sweave", package = "utils")
?disks
??disks
RSiteSearch("disks")
RSiteSearch("disk storage")
apropos("legend")
apropos("vector")
RSiteSearch("{disk performance")
RSiteSearch("{storage performance")
sd(0:100)
demo plotmath
demo (plotmath)
?choose
0^0
detach("package:RMySQL", unload=TRUE)
detach("package:DBI", unload=TRUE)
library("reshape2", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("reshape2", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages(c("class", "Formula", "lme4", "mgcv"))
install.packages("gcookbook")
library(gcookbook)
simpledat
barplot(simpledat, beside = T)
t(simpledat)
barplot(simpledat, beside = T)
barplot(t(simpledat)
, beside = T)
plot(simpledat[1, ], type = "l")
plot(simpledat[2, ], type = "l")
plot(simpledat[1, ], type = "l")
lines(simpledat[1, ], type = "l")
lines(simpledat[2, ], type = "l")
lines(simpledat[2, ], type = "l", col = "blue")
simpledat(long)
simpledat_lomng
simpledat_long
melt(simpledat)
load(reshape2)
librarya(reshape2)
install.packages(reshape2)
library("reshape2", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
melt(simpledat)
library(ggplot2)
ggplot(simpledat_lomng, aes = x(Aval, y = value, fill = Bval)) * geom_bar(stat = "identity", position ="dodge")
ggplot(simpledat_long, aes = x(Aval, y = value, fill = Bval)) * geom_bar(stat = "identity", position ="dodge")
ggplot(simpledat_long, aes = (x = Aval, y = value, fill = Bval)) * geom_bar(stat = "identity", position ="dodge")
ggplot(simpledat_long, aes = (x = Aval, y = value, fill = Bval)) + geom_bar(stat = "identity", position ="dodge")
ggplot(simpledat_long, aes(x = Aval, y = value, fill = Bval)) + geom_bar(stat = "identity", position ="dodge")
ggplot(simpledat_long, aes(x = Bval, y = value, fill = Aval)) + geom_bar(stat = "identity", position ="dodge")
ggplot(simpledat_long, aes(x = Aval, y = value, color = Bval, group - Bval)) + geom_line
ggplot(simpledat_long, aes(x = Aval, y = value, color = Bval, group = Bval)) + geom_line
ggplot(simpledat_long, aes(x = Aval, y = value, colour = Bval, group = Bval)) + geom_line
ggplot(simpledat_long, aes(x=Aval, y=value, colour=Bval, group=Bval) + geom_line
)
ggplot(simpledat_long, aes(x=Aval, y=value, colour=Bval, group=Bval)) + geom_line
ggplot(simpledat_long, aes(x = Aval, y = value, colour = Bval, group = Bval)) + geom_line
ggplot(simpledat_long, aes(x = Aval, y = value, colour = Bval, group = Bval)) + geom_line()
str(simpledat)
str(simpledat_long)
dat<- data.frame(xval = 1:4, yval = c(3, 5, 6, 9), group = c("A", "B", "C", "D"))
dat
ggplot(dat, aes(x = xval, y = yval))
ggplot(dat, aes(x = xval, y = yval)) + geom_point()
p <- ggplot(dat, aes(x = xval, y = yval))
p + geom_point()
p + geom_point(aes(color = group))
p + geom_point(color = group)
p + geom_point(color = blue)
p + geom_point(color = "blue"")
)
""
p + geom_point(color = "blue")
p + geom_point() + scale_x_continuous(limits = c(0, 8))
p + geom_point() + scale_color_manual(values = c("orange", "forestgreen"))
p + geom_point() + scale_colour_manual(values = c("orange", "forestgreen"))
p
getwd()
install.packages(c("class", "jsonlite", "mgcv"))
getwd()
getwd()
?knitr
library("knitr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
?knitr
act <- read.csv("activity.csv")
setwd("~/Documents/datasciencecoursera/Reproducible research/Project 1")
act <- read.csv("activity.csv")
getwd()
act <- read.csv("activity.csv")
setwd("~/Documents/datasciencecoursera/Reproducible research/Project 1/RepData_PeerAssessment1")
act <- read.csv("activity.csv")
setwd("~/Documents/datasciencecoursera/Reproducible research/Project 1/RepData_PeerAssessment1")
act <- read.csv("activity.csv")
View(act)
?aggregate
aggregate (steps, date)
aggregate (act$steps, act$date)
aggregate (act$steps, act$date, FUN = mean)
aggregate (act$steps, by = act$date, FUN = mean)
act.melt <- melt(act, id = "date", measure = "steps")
act.table <- dcast(act.melt, steps ~ date, mean)
act <- read.csv("activity.csv")
library(reshape2)
act.melt <- melt(act, id = "date", measure = "steps")
act.table <- dcast(act.melt, steps ~ date, mean)
?read.csv
View(act)
?read.table
setwd("~/Documents/datasciencecoursera/Reproducible research/Project 1/RepData_PeerAssessment1")
act <- read.csv("activity.csv", colClasses = c("integer", "Date", "integer"))
library(reshape2)
act.melt <- melt(act, id = "date", measure = "steps")
act.table <- dcast(act.melt, steps ~ date, mean)
?melt
?aggregate
act <- read.csv("activity.csv", colClasses = c("integer", "Date", "integer"))
q1 <- aggregate.data.frame(act, by = date, FUN = "mean"")
q1
)
""
q1 <- aggregate.data.frame(act, by = date, FUN = "mean")
q1 <- aggregate(act, by = as.list(date), FUN = "mean")
q1 <- aggregate(steps ~ date, data = act FUN = mean)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
melt.act <- melt(act, id = "steps", na.rm = TRUE)
library("plyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
mean.act <- ddply(act, "date", function(df)(mean(df$steps)))
View(melt.act)
act <- read.csv("activity.csv", colClasses = c("integer", "Date", "integer"))
library(plyr)
mean.act <- ddply(act, "date", function(df)(mean(df$steps)))
head(mean.act)
tail)mean.act
tail(mean.act)
mean.act <- ddply(act, "date", function(df)(mean(df$steps)), rm.na = TRUE)
?plyr
?ddply
hist(mean.act$V1)
m.act <- ddply(act, "date", mean, rm.na = TRUE)
warnings()
m.act <- ddply(act, "date", summarize, rm.na = TRUE)
mean.act <- ddply(act, "date", function(df)(mean(df$steps)), rm.na = TRUE)
mean.act <- ddply(act, "date", function(df)(mean(df$steps)))
mean.act <- ddply(act, "date", function(df)(sum(df$steps)), rm.na = TRUE)
mean.act <- ddply(act, "date", function(df)(sum(df$steps)))
View(mean.act)
hist(mean.act$V1)
hist(mean.act$V1, breaks = 10)
hist(mean.act$V1, breaks = 10)
hist(tot.steps$V1, breaks = 10, main = "Histogram of total steps per day", xlab = "Total steps per day")
tot.steps <- ddply(act, "date", function(df)(sum(df$steps)))
hist(tot.steps$V1, breaks = 10, main = "Histogram of total steps per day", xlab = "Total steps per day")
median.steps  <- median(tot.steps$V1)
mean.steps  <- mean(tot.steps$V1)
?mean
median.steps  <- median(tot.steps$V1, na.rm = TRUE)
mean.steps  <- mean(tot.steps$V1, na.rm = TRUE)
median.steps
View(act)
int.steps <- ddply(act, "interval", function(df)(mean(df$steps)))
int.steps <- ddply(act, "interval", function(df)(mean(df$steps)))
plot(int.steps$interval, int$steps$V1, type = "l", main = "Mean activity per interval", ylab = "Steps", xlab = "Interval")
head(int.steps)
tail(int.steps)
tail(act)
View(int.steps)
plot(int.steps$interval, int$steps$V1, type = "l", main = "Mean activity per interval", ylab = "Steps", xlab = "Interval")
plot(int.steps$interval, int$steps$V1, type = "l", main = "Mean activity per interval", ylab = "Steps", xlab = "Interval")
plot(int.steps$interval, int.steps$V1, type = "l", main = "Mean activity per interval", ylab = "Steps", xlab = "Interval")
View(int.steps)
act.good <- complete.cases(act)
int.steps <- ddply(act.good, "interval", function(df)(mean(df$steps)))
act.good <- act[complete.cases(act), ]
int.steps <- ddply(act.good, "interval", function(df)(mean(df$steps)))
plot(int.steps$interval, int.steps$V1, type = "l", main = "Mean activity per interval", ylab = "Steps", xlab = "Interval")
act <- read.csv("activity.csv", colClasses = c("integer", "Date", "integer"))
library(plyr)
tot.steps <- ddply(act, "date", function(df)(sum(df$steps)))
hist(tot.steps$V1, breaks = 10, main = "Histogram of total steps per day", xlab = "Total steps per day")
median.steps  <- median(tot.steps$V1, na.rm = TRUE)
mean.steps  <- mean(tot.steps$V1, na.rm = TRUE)
act.good <- act[complete.cases(act), ]
int.steps <- ddply(act.good, "interval", function(df)(mean(df$steps)))
plot(int.steps$interval, int.steps$V1, type = "l", main = "Mean activity per interval", ylab = "Steps", xlab = "Interval")
max.activity <- max(int.steps$V1)
max.interval <- int.steps$interval[int.steps$V1 == max.activity]
missing  <- nrows(act) - nrows(act.good)
missing  <- nrow(act) - nrow(act.good)
act <- read.csv("activity.csv", colClasses = c("integer", "Date", "integer"))
library(plyr)
tot.steps <- ddply(act, "date", function(df)(sum(df$steps)))
hist(tot.steps$V1, breaks = 10, main = "Histogram of total steps per day", xlab = "Total steps per day")
median.steps  <- median(tot.steps$V1, na.rm = TRUE)
mean.steps  <- mean(tot.steps$V1, na.rm = TRUE)
act.good <- act[complete.cases(act), ]
int.steps <- ddply(act.good, "interval", function(df)(mean(df$steps)))
plot(int.steps$interval, int.steps$V1, type = "l", main = "Mean activity per interval", ylab = "Steps", xlab = "Interval")
max.activity <- max(int.steps$V1)
max.interval <- int.steps$interval[int.steps$V1 == max.activity]
missing  <- nrows(act) - nrows(act.good)
missing  <- nrow(act) - nrow(act.good)
nrow(na.omit(act))
nrow(act) - nrow(na.omit(act))
knit2html()
?knit2html
