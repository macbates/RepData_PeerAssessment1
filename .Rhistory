load ("mtcars")
data(mtcars)
library(mtcars)
library("mtcars"")
0
""
library("mtcars")
data(mtcars)
data(mtcars)
names(mtcars)
cars <- mtcars(1:5, 1:4)
mtcars
cars <- mtcars[1:5, 1:4]
cars
t(cars)
install.packages("RMySQL")
load(RMySQL)
load("RMySQL")
library("RMySQL", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
ucscDb <- dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
resul <- dbGetQuery(ucsdDb, "show databases"); dbDisconnect(ucscDb)
resul <- dbGetQuery(ucsdDb, "show databases"); dbDisconnect(ucscDb);
result <- dbGetQuery(ucscDb, "show databases"); dbDisconnect(ucscDb)
result
hg19 <- dbConnect(MySQL(), user="genome", db="hg19", host="genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
length(allTables)
allTables[1:5]
dbListFields(hg19, "affyU133Plus2")
dbGetQuery(hg19, "select count(*) from affyU133Plus2")
affyData <- dbReadTable(hg19, "affyU133Plus2")
head(affyU133Plus2)
head(affyData)
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 and 3")
affyMis <- fetch(query); quantile(affyMis$mis$Matches)
affyMis <- fetch(query)
quantile(affyMis$misMatches)
affyMisSmall <- fetch(query, n=10); dbClearResult(query)
dim(affyMisSmall)
dbDisconnect(hg19)
detach("package:RMySQL", unload=TRUE)
con <- url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
htmlCode <- readLines(con)
htmlCode
close(con)
library(XML)
url <- ("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
html <- htmlTreeParse(url, useInternalNodes=T)
htm,l
html
xpathSApply(html, "//title", xmlValue)
xpathSApply(htnl, "//td[@id='col-citeby']", xmlValue)
xpathSApply(html, "//td[@id='col-citeby']", xmlValue)
xpathSApply(html, "//td[@id='col-citedby']", xmlValue)
library(httr)
html2 <- GET(url)
html2
content2 <- content(html2, as <- "text")
parsedHtml <- htmlParse(content2, asText=T)
xpathSApply(parsedHtml, "//title", xmlValue)
pg1 <- GET("http://httpbin.org/basic-auth/user/passwd")
pg1
pg2 <- GET("http://httpbin.org/basic-auth/user/passwd", authenticate("user", "passwd"))
pg2
names(pg2)
google <- handle("http://google.com")
handle
google
pg1 <- GET(handle=google, path="/")
pg2 <- GET(handle=google, path="search")
pg1
pg2
?connections
?jpeg
detach("package:RMySQL", unload=TRUE)
set.seed(13435)
x <- data.frane("var1"=sample(1:5), "var2"=sample(6:10), "var3"=sample(11:15))
x <- data.frame("var1"=sample(1:5), "var2"=sample(6:10), "var3"=sample(11:15))
x
x <- x[sample(1:5),]; x$var2[c(1,3)]=NA
x
x[1,]
x[,1]
x[1:2,]
x[1:2,"var2"]
x
x[x$var1<=3 & x$var3>11,]
?which
library(reshape)
data (mtcars)
heat(mtcars)
head(mtcars)
mtcars$carname <- rownames(mtcars)
head(mtcars)
carmelt <- melt(mtcars, id=c("carname", "gear", "ctl"), measure.vars=c("mpg", "hp"))
carmelt <- melt(mtcars, id=c("carname", "gear", "cyl"), measure.vars=c("mpg", "hp"))
carmelt
?melt
?cast
?dcast
cylData <- cast(carmelt, cyl ~ variable)
cylData
cylData <- cast(carmelt, cyl ~ variable, mean)
cylData
names(mtcars)
mtcars$eff <- mtcars$hp/mtcars$disp
head(mtcars)
effmelt <- melt(mtcars, id=c("carname", "eff", "cyl"), measure.vars="eff"
)
head(effmelt)
effmelt
effmelt <- melt(mtcars, id=c("carname", "eff", "cyl"), measure.vars=c("cyl, "eff"))
effmelt <- melt(mtcars, id=c("carname", "eff", "cyl"), measure.vars=c("cyl", "eff"))
effmelt
effData <- cast(carmelt, eff ~ variable, mean)
effData <- cast(carmelt, cyl ~ variable, mean)
effData
effData <- cast(effmelt, cyl ~ variable, mean)
effData
pop <- read.csv('http://2010.census.gov/2010census/data/pop_density.csv', skip=3)
pop <- read.csv('http://2010.census.gov/2010census/data/pop_density.csv', skip=3, method="curl")
install.packages("knitr")
?devices
?Devices
library(datasets)
with(faithful, plot(eruptions, waiting))
?with
dev.cur()
?png
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?splom
?trellis.par.set
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) * geom(smooth())
qplot(votes, rating, data = movies) * geom_smooth()
qplot(votes, rating, data = movies) + geom_smooth()
library(datasets)
qplot(Wind, Ozone, data = airquality, facets = .~factor(Month))
str(airquality)
airquality=transform(airquality, Month=factor(Month))
str(airquality)
qplot(Wind, Ozone, data = airquality, facets = .~Month)
?lines()
?llines()
?points()
llines
library lattice
library (lattice)
llines
?lpoints
lpoints
install.packages("gcookbook")
install.packages("devtools")
library(dectools)
library(devtools)
install_github("learnings", "richierocks")
install_github("learningr", "richierocks")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
demo()
browseVignettes()
vignette("Sweave", package = "utils")
?disks
??disks
RSiteSearch("disks")
RSiteSearch("disk storage")
apropos("legend")
apropos("vector")
RSiteSearch("{disk performance")
RSiteSearch("{storage performance")
sd(0:100)
demo plotmath
demo (plotmath)
?choose
0^0
detach("package:RMySQL", unload=TRUE)
detach("package:DBI", unload=TRUE)
library("reshape2", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("reshape2", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages(c("class", "Formula", "lme4", "mgcv"))
install.packages("gcookbook")
library(gcookbook)
simpledat
barplot(simpledat, beside = T)
t(simpledat)
barplot(simpledat, beside = T)
barplot(t(simpledat)
, beside = T)
plot(simpledat[1, ], type = "l")
plot(simpledat[2, ], type = "l")
plot(simpledat[1, ], type = "l")
lines(simpledat[1, ], type = "l")
lines(simpledat[2, ], type = "l")
lines(simpledat[2, ], type = "l", col = "blue")
simpledat(long)
simpledat_lomng
simpledat_long
melt(simpledat)
load(reshape2)
librarya(reshape2)
install.packages(reshape2)
library("reshape2", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
melt(simpledat)
library(ggplot2)
ggplot(simpledat_lomng, aes = x(Aval, y = value, fill = Bval)) * geom_bar(stat = "identity", position ="dodge")
ggplot(simpledat_long, aes = x(Aval, y = value, fill = Bval)) * geom_bar(stat = "identity", position ="dodge")
ggplot(simpledat_long, aes = (x = Aval, y = value, fill = Bval)) * geom_bar(stat = "identity", position ="dodge")
ggplot(simpledat_long, aes = (x = Aval, y = value, fill = Bval)) + geom_bar(stat = "identity", position ="dodge")
ggplot(simpledat_long, aes(x = Aval, y = value, fill = Bval)) + geom_bar(stat = "identity", position ="dodge")
ggplot(simpledat_long, aes(x = Bval, y = value, fill = Aval)) + geom_bar(stat = "identity", position ="dodge")
ggplot(simpledat_long, aes(x = Aval, y = value, color = Bval, group - Bval)) + geom_line
ggplot(simpledat_long, aes(x = Aval, y = value, color = Bval, group = Bval)) + geom_line
ggplot(simpledat_long, aes(x = Aval, y = value, colour = Bval, group = Bval)) + geom_line
ggplot(simpledat_long, aes(x=Aval, y=value, colour=Bval, group=Bval) + geom_line
)
ggplot(simpledat_long, aes(x=Aval, y=value, colour=Bval, group=Bval)) + geom_line
ggplot(simpledat_long, aes(x = Aval, y = value, colour = Bval, group = Bval)) + geom_line
ggplot(simpledat_long, aes(x = Aval, y = value, colour = Bval, group = Bval)) + geom_line()
str(simpledat)
str(simpledat_long)
dat<- data.frame(xval = 1:4, yval = c(3, 5, 6, 9), group = c("A", "B", "C", "D"))
dat
ggplot(dat, aes(x = xval, y = yval))
ggplot(dat, aes(x = xval, y = yval)) + geom_point()
p <- ggplot(dat, aes(x = xval, y = yval))
p + geom_point()
p + geom_point(aes(color = group))
p + geom_point(color = group)
p + geom_point(color = blue)
p + geom_point(color = "blue"")
)
""
p + geom_point(color = "blue")
p + geom_point() + scale_x_continuous(limits = c(0, 8))
p + geom_point() + scale_color_manual(values = c("orange", "forestgreen"))
p + geom_point() + scale_colour_manual(values = c("orange", "forestgreen"))
p
getwd()
install.packages(c("class", "jsonlite", "mgcv"))
getwd()
getwd()
?knitr
library("knitr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
?knitr
library(plyr)
act <- read.csv("activity.csv", colClasses = c("integer", "Date", "integer"))
setwd("~/Documents/datasciencecoursera/Reproducible research/Project 1/RepData_PeerAssessment1")
library(plyr)
act <- read.csv("activity.csv", colClasses = c("integer", "Date", "integer"))
tot.steps <- ddply(act, "date", function(df)(sum(df$steps)))
hist(tot.steps$V1, breaks = 10, main = "Histogram of total steps per day", xlab = "Total steps per day")
median.steps  <- median(tot.steps$V1, na.rm = TRUE)
mean.steps  <- mean(tot.steps$V1, na.rm = TRUE)
act.good <- act[complete.cases(act), ]
int.steps <- ddply(act.good, "interval", function(df)(mean(df$steps)))
plot(int.steps$interval, int.steps$V1, type = "l", main = "Mean activity per interval", ylab = "Steps", xlab = "Interval")
max.activity <- max(int.steps$V1)
max.interval <- int.steps$interval[int.steps$V1 == max.activity]
missing  <- nrow(act) - nrow(act.good)
?while
''
?while
?
?match
new.act <- act
for (i in 1:nrow(new.act) {
if (is.na(new.act[new.act$steps, i])) { # Missing value in this row?
new.act$steps[i] <- new.act[new$act$interval] %in% int.steps$interval
}
}
for (i in 1:nrow(new.act) {
if (is.na(new.act[new.act$steps, i])) { # Missing value in this row?
new.act$steps[i] <- new.act[new$act$interval] %in% int.steps$interval[]
}
}
for (i in 1:nrow(new.act)) {
if (is.na(new.act[new.act$steps, i])) { # Missing value in this row?
new.act$steps[i] <- new.act[new$act$interval] %in% int.steps$interval[]
}
}
new.act[new.act$steps, i])
new.act[new.act$steps, 1]
new$steps[1]
new.act$steps[1]
new.act$steps[1]5000
new.act$steps[1000]
new.act$steps[10000]
int.steps$interval[10]
newact$interval[1] %in% int.steps[1]
new.act$interval[1] %in% int.steps[1]
new.act$interval[1] %in% int.interval[1]
new.act$interval[1] %in% int.steps$interval[1]
match(newact$interval[1], int.steps$interval)
match(new.act$interval[1], int.steps$interval)
match(new.act$interval[2], int.steps$interval)
match(new.act$interval[500], int.steps$interval)
for (i in 1:nrow(new.act)) {
if (is.na(new.act$steps[i]) { # Missing value?
index <- match(new.act$interval[1], int.steps$interval) # Get the interval offset
new.act$steps[i] <- int.steps$V1[index] # Put in the mean steps for that interval
}
}
for (i in 1:nrow(new.act)) {
if (is.na(new.act$steps[i])) { # Missing value?
index <- match(new.act$interval[i], int.steps$interval) # Get the interval offset
new.act$steps[i] <- int.steps$V1[index] # Put in the mean steps for that interval
}
}
View(act)
View(int.steps)
View(new.act)
tot.new.steps <- ddply(new.act, "date", function(df)(sum(df$steps)))
hist(tot.new.steps$V1, breaks = 10, main = "Histogram of total steps per day (Facricate missing values)", xlab = "Total steps per day")
?plot
tot.new.steps <- ddply(new.act, "date", function(df)(sum(df$steps)))
hist(tot.new.steps$V1, breaks = 10, main = "Histogram of total steps per day, sub = "Fabricate missing values", xlab = "Total steps per day")
tot.new.steps <- ddply(new.act, "date", function(df)(sum(df$steps)))
hist(tot.new.steps$V1, breaks = 10, main = "Histogram of total steps per day"", sub = "Fabricate missing values", xlab = "Total steps per day")
tot.new.steps <- ddply(new.act, "date", function(df)(sum(df$steps)))
hist(tot.new.steps$V1, breaks = 10, main = "Histogram of total steps per day", sub = "Fabricate missing values", xlab = "Total steps per day")
hist(tot.steps$V1, breaks = 10, main = "Histogram of total steps per day", sub = "(Missing values not included)" xlab = "Total steps per day")
hist(tot.steps$V1, breaks = 10, main = "Histogram of total steps per day", sub = "(Missing values not included)", xlab = "Total steps per day")
median.new.steps  <- median(tot.new.steps$V1, na.rm = TRUE)
mean.new.steps  <- mean(tot.new.steps$V1, na.rm = TRUE)
hist(tot.steps$V1, breaks = 10, main = "Histogram of total steps per day", sub = "(Missing values not included)", xlab = "Total steps per day")
hist(tot.new.steps$V1, breaks = 10, main = "Histogram of total steps per day", sub = "(Missing values fabricated)", xlab = "Total steps per day")
head(tot.new.steps)
head(new.steps)
head(tot.steps)
View(new.act)
View(act)
head(int.steps)
tail(int.steps)
View(tot.steps)
View(tot.new.steps)
median.new.steps  <- median(tot.new.steps$V1)
mean.new.steps  <- mean(tot.new.steps$V1)
plot(int.steps$interval, int.steps$V1, type = "l", main = "Mean activity per interval", ylab = "Steps", xlab = "Interval")
View(new.act)
new.act <- act
for (i in 1:nrow(new.act)) {
if (is.na(new.act$steps[i])) { # Missing value?
index <- match(new.act$interval[i], int.steps$interval) # Get the interval offset
new.act$steps[i] <- int.steps$V1[index] # Put in the mean steps for that interval
}
}
View(tot.new.steps)
new.act <- act
View(new.act)
View(int.steps)
View(int.steps)
View(tot.steps)
View(int.steps)
for (i in 1:nrow(new.act)) {
if (is.na(new.act$steps[i])) { # Missing value?
index <- match(new.act$interval[i], tot.steps$interval) # Get the interval offset
new.act$steps[i] <- tot.steps$V1[index] # Put in the mean steps for that interval
}
}
View(tot.new.steps)
View(tot.new.steps)
View(new.act)
new.act <- act
for (i in 1:nrow(new.act)) {
if (is.na(new.act$steps[i])) { # Missing value?
index <- match(new.act$interval[i], tot.steps$interval) # Get the interval offset
new.act$steps[i] <- tot.steps$V1[index] # Put in the mean steps for that interval
}
}
View(new.act)
View(tot.steps)
View(tot.steps)
View(tot.steps)
x <- ddply(act, "date", function(df)(sum(df$steps)), na.rm = TRUE)
View(tot.steps)
act$steps[1]
act$steps[289]
sum(c(1, 2, 3, NA, 4))
sum(c(1, 2, 3, 4))
sum(c(1, 2, 3, NA, 4), rm.na = TRUE)
sum(omit.na(c(1, 2, 3, NA, 4))
)
sum(omit.na(c(1, 2, 3, NA, 4)))
sum(na.omit(c(1, 2, 3, NA, 4)))
tot.steps <- ddply(act, "date", function(df)(sum(omit.na(df$steps)))
)
tot.steps <- ddply(act, "date", function(df)(sum(na.omit(df$steps))))
View(tot.steps)
hist(tot.steps$V1, breaks = 10, main = "Histogram of total steps per day", sub = "(Missing values not included)", xlab = "Total steps per day")
setwd("~/Documents/datasciencecoursera/Reproducible research/Project 1/RepData_PeerAssessment1")
library(plyr)
act <- read.csv("activity.csv", colClasses = c("integer", "Date", "integer"))
tot.steps <- ddply(act, "date", function(df)(sum(na.omit(df$steps))))
hist(tot.steps$V1, breaks = 10, main = "Histogram of total steps per day", sub = "(Missing values not included)", xlab = "Total steps per day")
median.steps  <- median(tot.steps$V1, na.rm = TRUE)
mean.steps  <- mean(tot.steps$V1, na.rm = TRUE)
act.good <- act[complete.cases(act), ]
int.steps <- ddply(act.good, "interval", function(df)(mean(na.omit(df$steps))))
plot(int.steps$interval, int.steps$V1, type = "l", main = "Mean activity per interval", ylab = "Steps", xlab = "Interval")
max.activity <- max(int.steps$V1)
max.interval <- int.steps$interval[int.steps$V1 == max.activity]
missing  <- nrow(act) - nrow(act.good)
new.act <- act
for (i in 1:nrow(new.act)) {
if (is.na(new.act$steps[i])) { # Missing value?
index <- match(new.act$interval[i], tot.steps$interval) # Get the interval offset
new.act$steps[i] <- tot.steps$V1[index] # Put in the mean steps for that interval
}
}
tot.new.steps <- ddply(new.act, "date", function(df)(sum(df$steps)))
hist(tot.new.steps$V1, breaks = 10, main = "Histogram of total steps per day", sub = "(Missing values fabricated)", xlab = "Total steps per day")
median.new.steps  <- median(tot.new.steps$V1)
mean.new.steps  <- mean(tot.new.steps$V1)
View(new.act)
View(new.act)
View(int.steps)
View(act.good)
int.steps <- ddply(act.good, "interval", function(df)(mean(df$steps)))
View(int.steps)
median.new.steps  <- median(tot.new.steps$V1)
View(tot.new.steps)
View(tot.steps)
setwd("~/Documents/datasciencecoursera/Reproducible research/Project 1/RepData_PeerAssessment1")
library(plyr)
act <- read.csv("activity.csv", colClasses = c("integer", "Date", "integer"))
tot.steps <- ddply(act, "date", function(df)(sum(na.omit(df$steps))))
View(tot.steps)
act$steps[1]
hist(tot.steps$V1, breaks = 10, main = "Histogram of total steps per day", sub = "(Missing values not included)", xlab = "Total steps per day")
median.steps  <- median(tot.steps$V1)
mean.steps  <- mean(tot.steps$V1)
act.good <- act[complete.cases(act), ]
int.steps <- ddply(act.good, "interval", function(df)(mean(df$steps)))
View(int.steps)
View(act.good)
View(int.steps)
act.good[9]
act.good[9,]
act.good[9+288,]
act.good[9+288*2,]
act.good[9+288*3,]
act.good[9+288*4,]
act.good[9+288*5,]
act.good[9+288*5,]
act.good[9+288*6,]
act.good[9+288*7,]
act.good[9+288*8,]
plot(int.steps$interval, int.steps$V1, type = "l", main = "Mean activity per interval", ylab = "Steps", xlab = "Interval")
max.activity <- max(int.steps$V1)
max.interval <- int.steps$interval[int.steps$V1 == max.activity]
missing  <- nrow(act) - nrow(act.good)
new.act <- act
for (i in 1:nrow(new.act)) {
if (is.na(new.act$steps[i])) { # Missing value?
index <- match(new.act$interval[i], tot.steps$interval) # Get the interval offset
new.act$steps[i] <- tot.steps$V1[index] # Put in the mean steps for that interval
}
}
View(new.act)
View(tot.steps)
View(int.steps)
View(tot.steps)
View(int.steps)
View(int.steps)
View(int.steps)
View(tot.steps)
View(int.steps)
View(int.steps)
new.act <- act
for (i in 1:nrow(new.act)) {
if (is.na(new.act$steps[i])) { # Missing value?
index <- match(new.act$interval[i], int.steps$interval) # Get the interval offset
new.act$steps[i] <- int.steps$V1[index] * nrow(tot.steps) # Put in the mean steps for that interval
}
}
View(new.act)
tot.new.steps <- ddply(new.act, "date", function(df)(sum(df$steps)))
hist(tot.new.steps$V1, breaks = 10, main = "Histogram of total steps per day", sub = "(Missing values fabricated)", xlab = "Total steps per day")
median.new.steps  <- median(tot.new.steps$V1)
mean.new.steps  <- mean(tot.new.steps$V1)
View(tot.new.steps)
View(int.steps)
View(int.steps)
View(int.steps)
new.act <- act
for (i in 1:nrow(new.act)) {
if (is.na(new.act$steps[i])) { # Missing value?
index <- match(new.act$interval[i], int.steps$interval) # Get the interval offset
new.act$steps[i] <- int.steps$V1[index] # Put in the mean steps for that interval
}
}
tot.new.steps <- ddply(new.act, "date", function(df)(sum(df$steps)))
hist(tot.new.steps$V1, breaks = 10, main = "Histogram of total steps per day", sub = "(Missing values fabricated)", xlab = "Total steps per day")
median.new.steps  <- median(tot.new.steps$V1)
mean.new.steps  <- mean(tot.new.steps$V1)
hist(tot.steps$V1, breaks = 10, main = "Histogram of total steps per day", sub = "(Missing values not included)", xlab = "Total steps per day")
View(tot.new.steps)
hist(tot.steps$V1, breaks = 20, main = "Histogram of total steps per day", sub = "(Missing values not included)", xlab = "Total steps per day")
hist(tot.new.steps$V1, breaks = 20, main = "Histogram of total steps per day", sub = "(Missing values fabricated)", xlab = "Total steps per day")
tot.steps <- ddply(act, "date", function(df)(sum(na.omit(df$steps)))
)
?weekdays
View(new.act)
View(tot.new.steps)
weekdays(tot.new.steps)
weekdays(tot.new.steps$date)
